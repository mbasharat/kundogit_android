/*
 * Copyright 2011 Freescale Semiconductor, Inc. All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 */

#ifndef __ARCH_ARM_MACH_MX6_CCM_REGS_H__
#define __ARCH_ARM_MACH_MX6_CCM_REGS_H__

struct mxc_ccm_reg {
	u32 ccr;	/* 0x0000 */
	u32 ccdr;
	u32 csr;
	u32 ccsr;
	u32 cacrr;	/* 0x0010*/
	u32 cbcdr;
	u32 cbcmr;
	u32 cscmr1;
	u32 cscmr2;	/* 0x0020 */
	u32 cscdr1;
	u32 cs1cdr;
	u32 cs2cdr;
	u32 cdcdr;	/* 0x0030 */
	u32 chscdr;
	u32 cscdr2;
	u32 cscdr3;
	u32 cscdr4;	/* 0x0040 */
	u32 resv0;
	u32 cdhipr;
	u32 cdcr;
	u32 ctor;	/* 0x0050 */
	u32 clpcr;
	u32 cisr;
	u32 cimr;
	u32 ccosr;	/* 0x0060 */
	u32 cgpr;
	u32 CCGR0;
	u32 CCGR1;
	u32 CCGR2;	/* 0x0070 */
	u32 CCGR3;
	u32 CCGR4;
	u32 CCGR5;
	u32 CCGR6;	/* 0x0080 */
	u32 CCGR7;
	u32 cmeor;
};

/* Define the bits in register CCR */
#define MXC_CCM_CCR_RBC_EN				(1 << 27)
#define MXC_CCM_CCR_REG_BYPASS_CNT_MASK			(0x3F << CCR_REG_BYPASS_CNT_OFFSET)
#define MXC_CCM_CCR_REG_BYPASS_CNT_OFFSET		21
#define MXC_CCM_CCR_WB_COUNT_MASK			(0x7 << MXC_CCM_CCR_WB_COUNT_OFFSET)
#define MXC_CCM_CCR_WB_COUNT_OFFSET			(1 << 16)
#define MXC_CCM_CCR_COSC_EN				(1 << 12)
#define MXC_CCM_CCR_OSCNT_MASK				(0xFF << MXC_CCM_CCR_OSCNT_OFFSET)
#define MXC_CCM_CCR_OSCNT_OFFSET			0

/* Define the bits in register CCDR */
#define MXC_CCM_CCDR_MMDC_CH1_HS_MASK			(1 << 16)
#define MXC_CCM_CCDR_MMDC_CH0_HS_MASK			(1 << 17)

/* Define the bits in register CSR */
#define MXC_CCM_CSR_COSC_READY				(1 << 5)
#define MXC_CCM_CSR_REF_EN_B				(1 << 0)

/* Define the bits in register CCSR */
#define MXC_CCM_CCSR_PDF_540M_AUTO_DIS			(1 << 15)
#define MXC_CCM_CCSR_PDF_720M_AUTO_DIS			(1 << 14)
#define MXC_CCM_CCSR_PDF_454M_AUTO_DIS			(1 << 13)
#define MXC_CCM_CCSR_PDF_508M_AUTO_DIS			(1 << 12)
#define MXC_CCM_CCSR_PDF_594M_AUTO_DIS			(1 << 11)
#define MXC_CCM_CCSR_PDF_352M_AUTO_DIS			(1 << 10)
#define MXC_CCM_CCSR_PDF_400M_AUTO_DIS			(1 << 9)
#define MXC_CCM_CCSR_STEP_SEL				(1 << 8)
#define MXC_CCM_CCSR_PLL1_SW_CLK_SEL			(1 << 2)
#define MXC_CCM_CCSR_PLL2_SW_CLK_SEL			(1 << 1)
#define MXC_CCM_CCSR_PLL3_SW_CLK_SEL			(1 << 0)

/* Define the bits in register CACRR */
#define MXC_CCM_CACRR_ARM_PODF_OFFSET			0
#define MXC_CCM_CACRR_ARM_PODF_MASK			(0x7 << MXC_CCM_CACRR_ARM_PODF_OFFSET)

/* Define the bits in register CBCDR */
#define MXC_CCM_CBCDR_PERIPH_CLK2_PODF_MASK		(0x7 << MXC_CCM_CBCDR_PERIPH_CLK2_PODF_OFFSET)
#define MXC_CCM_CBCDR_PERIPH_CLK2_PODF_OFFSET		27
#define MXC_CCM_CBCDR_PERIPH2_CLK2_SEL			(1 << 26)
#define MXC_CCM_CBCDR_PERIPH_CLK_SEL			(1 << 25)
#define MXC_CCM_CBCDR_MMDC_CH0_PODF_MASK		(0x7 << MXC_CCM_CBCDR_MMDC_CH0_PODF_OFFSET)
#define MXC_CCM_CBCDR_MMDC_CH0_PODF_OFFSET		19
#define MXC_CCM_CBCDR_AXI_PODF_MASK			(0x7 << MXC_CCM_CBCDR_AXI_PODF_OFFSET)
#define MXC_CCM_CBCDR_AXI_PODF_OFFSET			16
#define MXC_CCM_CBCDR_AHB_PODF_MASK			(0x7 << MXC_CCM_CBCDR_AHB_PODF_OFFSET)
#define MXC_CCM_CBCDR_AHB_PODF_OFFSET			10
#define MXC_CCM_CBCDR_IPG_PODF_MASK			(0x3 << MXC_CCM_CBCDR_IPG_PODF_OFFSET)
#define MXC_CCM_CBCDR_IPG_PODF_OFFSET			8
#define MXC_CCM_CBCDR_AXI_ALT_SEL			(1 << 7)
#define MXC_CCM_CBCDR_AXI_SEL				(1 << 6)
#define MXC_CCM_CBCDR_MMDC_CH1_PODF_MASK		(0x7 << MXC_CCM_CBCDR_MMDC_CH1_PODF_OFFSET)
#define MXC_CCM_CBCDR_MMDC_CH1_PODF_OFFSET		3
#define MXC_CCM_CBCDR_PERIPH2_CLK2_PODF_MASK		(0x7 << MXC_CCM_CBCDR_PERIPH2_CLK2_PODF_OFFSET)
#define MXC_CCM_CBCDR_PERIPH2_CLK2_PODF_OFFSET		0

/* Define the bits in register CBCMR */
#define MXC_CCM_CBCMR_GPU3D_SHADER_PODF_MASK		(0x7 << MXC_CCM_CBCMR_GPU3D_SHADER_PODF_OFFSET)
#define MXC_CCM_CBCMR_GPU3D_SHADER_PODF_OFFSET		29
#define MXC_CCM_CBCMR_GPU3D_CORE_PODF_MASK		(0x7 << MXC_CCM_CBCMR_GPU3D_CORE_PODF_OFFSET)
#define MXC_CCM_CBCMR_GPU3D_CORE_PODF_OFFSET		26
#define MXC_CCM_CBCMR_GPU2D_CORE_PODF_MASK		(0x7 << MXC_CCM_CBCMR_GPU2D_CORE_PODF_OFFSET)
#define MXC_CCM_CBCMR_GPU2D_CORE_PODF_OFFSET		23
#define MXC_CCM_CBCMR_PRE_PERIPH2_CLK_SEL_MASK		(0x3 << MXC_CCM_CBCMR_PRE_PERIPH2_CLK_SEL_OFFSET)
#define MXC_CCM_CBCMR_PRE_PERIPH2_CLK_SEL_OFFSET	21
#define MXC_CCM_CBCMR_PRE_PERIPH2_CLK2_SEL		(1 << 20)
#define MXC_CCM_CBCMR_PRE_PERIPH_CLK_SEL_MASK		(0x3 << MXC_CCM_CBCMR_PRE_PERIPH_CLK_SEL_OFFSET)
#define MXC_CCM_CBCMR_PRE_PERIPH_CLK_SEL_OFFSET		18
#define MXC_CCM_CBCMR_GPU2D_CLK_SEL_MASK		(0x3 << MXC_CCM_CBCMR_GPU2D_CLK_SEL_OFFSET)
#define MXC_CCM_CBCMR_GPU2D_CLK_SEL_OFFSET		16
#define MXC_CCM_CBCMR_VPU_AXI_CLK_SEL_MASK		(0x3 << MXC_CCM_CBCMR_VPU_AXI_CLK_SEL_OFFSET)
#define MXC_CCM_CBCMR_VPU_AXI_CLK_SEL_OFFSET		14
#define MXC_CCM_CBCMR_PERIPH_CLK2_SEL_MASK		(0x3 << MXC_CCM_CBCMR_PERIPH_CLK2_SEL_OFFSET)
#define MXC_CCM_CBCMR_PERIPH_CLK2_SEL_OFFSET		12
#define MXC_CCM_CBCMR_VDOAXI_CLK_SEL			(1 << 11)
#define MXC_CCM_CBCMR_PCIE_AXI_CLK_SEL			(1 << 10)
#define MXC_CCM_CBCMR_GPU3D_SHADER_CLK_SEL_MASK		(0x3 << MXC_CCM_CBCMR_GPU3D_SHADER_CLK_SEL_OFFSET)
#define MXC_CCM_CBCMR_GPU3D_SHADER_CLK_SEL_OFFSET	8
#define MXC_CCM_CBCMR_GPU3D_CORE_CLK_SEL_MASK		(0x3 << MXC_CCM_CBCMR_GPU3D_CORE_CLK_SEL_OFFSET)
#define MXC_CCM_CBCMR_GPU3D_CORE_CLK_SEL_OFFSET		4
#define MXC_CCM_CBCMR_GPU3D_AXI_CLK_SEL			(1 << 1)
#define MXC_CCM_CBCMR_GPU2D_AXI_CLK_SEL			(1 << 0)

/* Define the bits in register CSCMR1 */
#define MXC_CCM_CSCMR1_ACLK_EMI_SLOW_MASK		(0x3 << MXC_CCM_CSCMR1_ACLK_EMI_SLOW_OFFSET)
#define MXC_CCM_CSCMR1_ACLK_EMI_SLOW_OFFSET		29
#define MXC_CCM_CSCMR1_ACLK_EMI_MASK			(0x3 << MXC_CCM_CSCMR1_ACLK_EMI_OFFSET)
#define MXC_CCM_CSCMR1_ACLK_EMI_OFFSET			27
#define MXC_CCM_CSCMR1_ACLK_EMI_SLOW_PODF_MASK		(0x7 << MXC_CCM_CSCMR1_ACLK_EMI_SLOW_PODF_OFFSET)
#define MXC_CCM_CSCMR1_ACLK_EMI_SLOW_PODF_OFFSET	23
#define MXC_CCM_CSCMR1_ACLK_EMI_PODF_MASK		(0x7 << MXC_CCM_CSCMR1_ACLK_EMI_PODF_OFFSET)
#define MXC_CCM_CSCMR1_ACLK_EMI_PODF_OFFSET		20
#define MXC_CCM_CSCMR1_USDHC4_CLK_SEL			(1 << 19)
#define MXC_CCM_CSCMR1_USDHC3_CLK_SEL			(1 << 18)
#define MXC_CCM_CSCMR1_USDHC2_CLK_SEL			(1 << 17)
#define MXC_CCM_CSCMR1_USDHC1_CLK_SEL			(1 << 16)
#define MXC_CCM_CSCMR1_SSI3_CLK_SEL_MASK		(0x3 << MXC_CCM_CSCMR1_SSI3_CLK_SEL_OFFSET)
#define MXC_CCM_CSCMR1_SSI3_CLK_SEL_OFFSET		14
#define MXC_CCM_CSCMR1_SSI2_CLK_SEL_MASK		(0x3 << MXC_CCM_CSCMR1_SSI2_CLK_SEL_OFFSET)
#define MXC_CCM_CSCMR1_SSI2_CLK_SEL_OFFSET		12
#define MXC_CCM_CSCMR1_SSI1_CLK_SEL_MASK		(0x3 << MXC_CCM_CSCMR1_SSI1_CLK_SEL_OFFSET)
#define MXC_CCM_CSCMR1_SSI1_CLK_SEL_OFFSET		10
#define MXC_CCM_CSCMR1_PERCLK_PODF_OFFSET		0
#define MXC_CCM_CSCMR1_PERCLK_PODF_MASK			(0x3F << MXC_CCM_CSCMR1_PERCLK_PODF_OFFSET)

/* Define the bits in register CSCMR2 */
#define MXC_CCM_CSCMR2_ESAI_PRE_SEL_MASK		(0x3 << MXC_CCM_CSCMR2_ESAI_PRE_SEL_OFFSET)
#define MXC_CCM_CSCMR2_ESAI_PRE_SEL_OFFSET		19
#define MXC_CCM_CSCMR2_LDB_DI1_IPU_DIV			(1 << 11)
#define MXC_CCM_CSCMR2_LDB_DI0_IPU_DIV			(1 << 10)
#define MXC_CCM_CSCMR2_CAN_CLK_SEL_MASK			(0x3F << MXC_CCM_CSCMR2_CAN_CLK_SEL_OFFSET)
#define MXC_CCM_CSCMR2_CAN_CLK_SEL_OFFSET		2

/* Define the bits in register CSCDR1 */
#define MXC_CCM_CSCDR1_VPU_AXI_PODF_MASK		(0x7 << MXC_CCM_CSCDR1_VPU_AXI_PODF_OFFSET)
#define MXC_CCM_CSCDR1_VPU_AXI_PODF_OFFSET		25
#define MXC_CCM_CSCDR1_USDHC4_PODF_MASK			(0x7 << MXC_CCM_CSCDR1_USDHC4_PODF_OFFSET)
#define MXC_CCM_CSCDR1_USDHC4_PODF_OFFSET		22
#define MXC_CCM_CSCDR1_USDHC3_PODF_MASK			(0x7 << MXC_CCM_CSCDR1_USDHC3_PODF_OFFSET)
#define MXC_CCM_CSCDR1_USDHC3_PODF_OFFSET		19
#define MXC_CCM_CSCDR1_USDHC2_PODF_MASK			(0x7 << MXC_CCM_CSCDR1_USDHC2_PODF_OFFSET)
#define MXC_CCM_CSCDR1_USDHC2_PODF_OFFSET		16
#define MXC_CCM_CSCDR1_USDHC1_PODF_MASK			(0x7 << MXC_CCM_CSCDR1_USDHC1_PODF_OFFSET)
#define MXC_CCM_CSCDR1_USDHC1_PODF_OFFSET		11
#define MXC_CCM_CSCDR1_USBOH3_CLK_PRED_OFFSET		8
#define MXC_CCM_CSCDR1_USBOH3_CLK_PRED_MASK		(0x7 << MXC_CCM_CSCDR1_USBOH3_CLK_PRED_OFFSET)
#define MXC_CCM_CSCDR1_USBOH3_CLK_PODF_OFFSET		6
#define MXC_CCM_CSCDR1_USBOH3_CLK_PODF_MASK		(0x3 << MXC_CCM_CSCDR1_USBOH3_CLK_PODF_OFFSET)
#define MXC_CCM_CSCDR1_UART_CLK_PODF_MASK		(0x3F << MXC_CCM_CSCDR1_UART_CLK_PODF_OFFSET)
#define MXC_CCM_CSCDR1_UART_CLK_PODF_OFFSET		0

/* Define the bits in register CS1CDR */
#define MXC_CCM_CS1CDR_ESAI_CLK_PODF_MASK		(0x3F << MXC_CCM_CS1CDR_ESAI_CLK_PODF_OFFSET)
#define MXC_CCM_CS1CDR_ESAI_CLK_PODF_OFFSET		25
#define MXC_CCM_CS1CDR_SSI3_CLK_PODF_MASK		(0x3F << MXC_CCM_CS1CDR_SSI3_CLK_PODF_OFFSET)
#define MXC_CCM_CS1CDR_SSI3_CLK_PODF_OFFSET		16
#define MXC_CCM_CS1CDR_ESAI_CLK_PRED_MASK		(0x3 << MXC_CCM_CS1CDR_ESAI_CLK_PRED_OFFSET)
#define MXC_CCM_CS1CDR_ESAI_CLK_PRED_OFFSET		9
#define MXC_CCM_CS1CDR_SSI1_CLK_PRED_MASK		(0x7 << MXC_CCM_CS1CDR_SSI1_CLK_PRED_OFFSET)
#define MXC_CCM_CS1CDR_SSI1_CLK_PRED_OFFSET		6
#define MXC_CCM_CS1CDR_SSI1_CLK_PODF_MASK		(0x3F << MXC_CCM_CS1CDR_SSI1_CLK_PODF_OFFSET)
#define MXC_CCM_CS1CDR_SSI1_CLK_PODF_OFFSET		0

/* Define the bits in register CS2CDR */
#define MXC_CCM_CS2CDR_ENFC_CLK_PODF_MASK		(0x3F << MXC_CCM_CS2CDR_ENFC_CLK_PODF_OFFSET)
#define MXC_CCM_CS2CDR_ENFC_CLK_PODF_OFFSET		21
#define MXC_CCM_CS2CDR_ENFC_CLK_PRED_MASK		(0x7 << MXC_CCM_CS2CDR_ENFC_CLK_PRED_OFFSET)
#define MXC_CCM_CS2CDR_ENFC_CLK_PRED_OFFSET		18
#define MXC_CCM_CS2CDR_ENFC_CLK_SEL_MASK		(0x3 << MXC_CCM_CS2CDR_ENFC_CLK_SEL_OFFSET)
#define MXC_CCM_CS2CDR_ENFC_CLK_SEL_OFFSET		16
#define MXC_CCM_CS2CDR_LDB_DI1_CLK_SEL_MASK		(0x7 << MXC_CCM_CS2CDR_LDB_DI1_CLK_SEL_OFFSET)
#define MXC_CCM_CS2CDR_LDB_DI1_CLK_SEL_OFFSET		12
#define MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_MASK		(0x7 << MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_OFFSET)
#define MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_OFFSET		9
#define MXC_CCM_CS2CDR_SSI2_CLK_PRED_MASK		(0x7 << MXC_CCM_CS2CDR_SSI2_CLK_PRED_OFFSET)
#define MXC_CCM_CS2CDR_SSI2_CLK_PRED_OFFSET		6
#define MXC_CCM_CS2CDR_SSI2_CLK_PODF_MASK		(0x3F << MXC_CCM_CS2CDR_SSI2_CLK_PODF_OFFSET)
#define MXC_CCM_CS2CDR_SSI2_CLK_PODF_OFFSET		0

/* Define the bits in register CDCDR */
#define MXC_CCM_CDCDR_HSI_TX_PODF_MASK			(0x7 << MXC_CCM_CDCDR_HSI_TX_PODF_OFFSET)
#define MXC_CCM_CDCDR_HSI_TX_PODF_OFFSET		29
#define MXC_CCM_CDCDR_HSI_TX_CLK_SEL			(1 << 28)
#define MXC_CCM_CDCDR_SPDIF0_CLK_PRED_MASK		(0x7 << MXC_CCM_CDCDR_SPDIF0_CLK_PRED_OFFSET)
#define MXC_CCM_CDCDR_SPDIF0_CLK_PRED_OFFSET		25
#define MXC_CCM_CDCDR_SPDIF0_CLK_PODF_MASK		(0x7 << MXC_CCM_CDCDR_SPDIF0_CLK_PODF_OFFSET)
#define MXC_CCM_CDCDR_SPDIF0_CLK_PODF_OFFSET		19
#define MXC_CCM_CDCDR_SPDIF0_CLK_SEL_MASK		(0x3 << MXC_CCM_CDCDR_SPDIF0_CLK_SEL_OFFSET)
#define MXC_CCM_CDCDR_SPDIF0_CLK_SEL_OFFSET		20
#define MXC_CCM_CDCDR_SPDIF1_CLK_PRED_MASK		(0x7 << MXC_CCM_CDCDR_SPDIF1_CLK_PRED_OFFSET)
#define MXC_CCM_CDCDR_SPDIF1_CLK_PRED_OFFSET		12
#define MXC_CCM_CDCDR_SPDIF1_CLK_PODF_MASK		(0x7 << MXC_CCM_CDCDR_SPDIF1_CLK_PODF_OFFSET)
#define MXC_CCM_CDCDR_SPDIF1_CLK_PODF_OFFSET		9
#define MXC_CCM_CDCDR_SPDIF1_CLK_SEL_MASK		(0x3 << MXC_CCM_CDCDR_SPDIF1_CLK_SEL_OFFSET)
#define MXC_CCM_CDCDR_SPDIF1_CLK_SEL_OFFSET		7

/* Define the bits in register CHSCCDR */
#define MXC_CCM_CHSCCDR_IPU1_DI1_PRE_CLK_SEL_MASK	(0x7 << MXC_CCM_CHSCCDR_DI1_PRE_CLK_SEL_OFFSET)
#define MXC_CCM_CHSCCDR_IPU1_DI1_PRE_CLK_SEL_OFFSET	15
#define MXC_CCM_CHSCCDR_IPU1_DI1_PODF_MASK		(0x7 << MXC_CCM_CHSCCDR_IPU1_DI1_PODF_OFFSET)
#define MXC_CCM_CHSCCDR_IPU1_DI1_PODF_OFFSET		12
#define MXC_CCM_CHSCCDR_IPU1_DI1_CLK_SEL_MASK		(0x7 << MXC_CCM_CHSCCDR_IPU1_DI1_CLK_SEL_OFFSET)
#define MXC_CCM_CHSCCDR_IPU1_DI1_CLK_SEL_OFFSET		9
#define MXC_CCM_CHSCCDR_IPU1_DI0_PRE_CLK_SEL_MASK	(0x7 << MXC_CCM_CHSCCDR_DI0_PRE_CLK_SEL_OFFSET)
#define MXC_CCM_CHSCCDR_IPU1_DI0_PRE_CLK_SEL_OFFSET	6
#define MXC_CCM_CHSCCDR_IPU1_DI0_PODF_MASK		(0x7 << MXC_CCM_CHSCCDR_IPU1_DI0_PODF_OFFSET)
#define MXC_CCM_CHSCCDR_IPU1_DI0_PODF_OFFSET		3
#define MXC_CCM_CHSCCDR_IPU1_DI0_CLK_SEL_MASK		(0x7 << MXC_CCM_CHSCCDR_IPU1_DI0_CLK_SEL_OFFSET)
#define MXC_CCM_CHSCCDR_IPU1_DI0_CLK_SEL_OFFSET		0

/* Define the bits in register CSCDR2 */
#define MXC_CCM_CSCDR2_ECSPI_CLK_PODF_MASK		(0x3F << MXC_CCM_CSCDR2_ECSPI_CLK_PODF_OFFSET)
#define MXC_CCM_CSCDR2_ECSPI_CLK_PODF_OFFSET		19
#define MXC_CCM_CSCDR2_IPU2_DI1_PRE_CLK_SEL_MASK	(0x7 << MXC_CCM_CSCDR2_DI1_PRE_CLK_SEL_OFFSET)
#define MXC_CCM_CSCDR2_IPU2_DI1_PRE_CLK_SEL_OFFSET	15
#define MXC_CCM_CSCDR2_IPU2_DI1_PODF_MASK		(0x7 << MXC_CCM_CSCDR2_IPU2_DI1_PODF_OFFSET)
#define MXC_CCM_CSCDR2_IPU2_DI1_PODF_OFFSET		12
#define MXC_CCM_CSCDR2_IPU2_DI1_CLK_SEL_MASK		(0x7 << MXC_CCM_CSCDR2_IPU2_DI1_CLK_SEL_OFFSET)
#define MXC_CCM_CSCDR2_IPU2_DI1_CLK_SEL_OFFSET		9
#define MXC_CCM_CSCDR2_IPU2_DI0_PRE_CLK_SEL_MASK	(0x7 << MXC_CCM_CSCDR2_DI0_PRE_CLK_SEL_OFFSET)
#define MXC_CCM_CSCDR2_IPU2_DI0_PRE_CLK_SEL_OFFSET	6
#define MXC_CCM_CSCDR2_IPU2_DI0_PODF_MASK		(0x7 << MXC_CCM_CSCDR2_IPU2_DI0_PODF_OFFSET)
#define MXC_CCM_CSCDR2_IPU2_DI0_PODF_OFFSET		3
#define MXC_CCM_CSCDR2_IPU2_DI0_CLK_SEL_MASK		(0x7 << MXC_CCM_CSCDR2_IPU2_DI0_CLK_SEL_OFFSET)
#define MXC_CCM_CSCDR2_IPU2_DI0_CLK_SEL_OFFSET		0

/* Define the bits in register CSCDR3 */
#define MXC_CCM_CSCDR3_IPU2_HSP_PODF_MASK		(0x7 << MXC_CCM_CSCDR3_IPU2_HSP_PODF_OFFSET)
#define MXC_CCM_CSCDR3_IPU2_HSP_PODF_OFFSET		16
#define MXC_CCM_CSCDR3_IPU2_HSP_CLK_SEL_MASK		(0x3 << MXC_CCM_CSCDR3_IPU2_HSP_CLK_SEL_OFFSET)
#define MXC_CCM_CSCDR3_IPU2_HSP_CLK_SEL_OFFSET		14
#define MXC_CCM_CSCDR3_IPU1_HSP_PODF_MASK		(0x7 << MXC_CCM_CSCDR3_IPU1_HSP_PODF_OFFSET)
#define MXC_CCM_CSCDR3_IPU1_HSP_PODF_OFFSET		11
#define MXC_CCM_CSCDR3_IPU1_HSP_CLK_SEL_MASK		(0x3 << MXC_CCM_CSCDR3_IPU1_HSP_CLK_SEL_OFFSET)
#define MXC_CCM_CSCDR3_IPU1_HSP_CLK_SEL_OFFSET		9

/* Define the bits in register CDHIPR */
#define MXC_CCM_CDHIPR_ARM_PODF_BUSY			(1 << 16)
#define MXC_CCM_CDHIPR_PERIPH_CLK_SEL_BUSY		(1 << 5)
#define MXC_CCM_CDHIPR_MMDC_CH0_PODF_BUSY		(1 << 4)
#define MXC_CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY		(1 << 3)
#define MXC_CCM_CDHIPR_MMDC_CH1_PODF_BUSY		(1 << 2)
#define MXC_CCM_CDHIPR_AHB_PODF_BUSY			(1 << 1)
#define MXC_CCM_CDHIPR_AXI_PODF_BUSY			(1 << 0)

/* Define the bits in register CLPCR */
#define MXC_CCM_CLPCR_MASK_L2CC_IDLE			(1 << 27)
#define MXC_CCM_CLPCR_MASK_SCU_IDLE			(1 << 26)
#define MXC_CCM_CLPCR_MASK_CORE3_WFI			(1 << 25)
#define MXC_CCM_CLPCR_MASK_CORE2_WFI			(1 << 24)
#define MXC_CCM_CLPCR_MASK_CORE1_WFI			(1 << 23)
#define MXC_CCM_CLPCR_MASK_CORE0_WFI			(1 << 22)
#define MXC_CCM_CLPCR_BYP_MMDC_CH1_LPM_HS		(1 << 21)
#define MXC_CCM_CLPCR_BYP_MMDC_CH0_LPM_HS		(1 << 19)
#define MXC_CCM_CLPCR_WB_CORE_AT_LPM			(1 << 17)
#define MXC_CCM_CLPCR_WB_PER_AT_LPM			(1 << 17)
#define MXC_CCM_CLPCR_COSC_PWRDOWN			(1 << 11)
#define MXC_CCM_CLPCR_STBY_COUNT_MASK			(0x3 << MXC_CCM_CLPCR_STBY_COUNT_OFFSET)
#define MXC_CCM_CLPCR_STBY_COUNT_OFFSET			9
#define MXC_CCM_CLPCR_VSTBY				(1 << 8)
#define MXC_CCM_CLPCR_DIS_REF_OSC			(1 << 7)
#define MXC_CCM_CLPCR_SBYOS				(1 << 6)
#define MXC_CCM_CLPCR_ARM_CLK_DIS_ON_LPM		(1 << 5)
#define MXC_CCM_CLPCR_LPSR_CLK_SEL_MASK			(0x3 << MXC_CCM_CLPCR_LPSR_CLK_SEL_OFFSET)
#define MXC_CCM_CLPCR_LPSR_CLK_SEL_OFFSET		3
#define MXC_CCM_CLPCR_BYPASS_PMIC_VFUNC_READY		(1 << 2)
#define MXC_CCM_CLPCR_LPM_MASK				(0x3 << MXC_CCM_CLPCR_LPM_OFFSET)
#define MXC_CCM_CLPCR_LPM_OFFSET			0

/* Define the bits in register CISR */
#define MXC_CCM_CISR_ARM_PODF_LOADED			(1 << 26)
#define MXC_CCM_CISR_MMDC_CH0_PODF_LOADED		(1 << 23)
#define MXC_CCM_CISR_PERIPH_CLK_SEL_LOADED		(1 << 22)
#define MXC_CCM_CISR_MMDC_CH1_PODF_LOADED		(1 << 21)
#define MXC_CCM_CISR_AHB_PODF_LOADED			(1 << 20)
#define MXC_CCM_CISR_PERIPH2_CLK_SEL_LOADED		(1 << 19)
#define MXC_CCM_CISR_AXI_PODF_LOADED			(1 << 17)
#define MXC_CCM_CISR_COSC_READY				(1 << 6)
#define MXC_CCM_CISR_LRF_PLL				(1 << 0)

/* Define the bits in register CIMR */
#define MXC_CCM_CIMR_MASK_ARM_PODF_LOADED		(1 << 26)
#define MXC_CCM_CIMR_MASK_MMDC_CH0_PODF_LOADED		(1 << 23)
#define MXC_CCM_CIMR_MASK_PERIPH_CLK_SEL_LOADED		(1 << 22)
#define MXC_CCM_CIMR_MASK_MMDC_CH1_PODF_LOADED		(1 << 21)
#define MXC_CCM_CIMR_MASK_AHB_PODF_LOADED		(1 << 20)
#define MXC_CCM_CIMR_MASK_PERIPH2_CLK_SEL_LOADED	(1 << 22)
#define MXC_CCM_CIMR_MASK_AXI_PODF_LOADED		(1 << 17)
#define MXC_CCM_CIMR_MASK_COSC_READY			(1 << 6)
#define MXC_CCM_CIMR_MASK_LRF_PLL			(1 << 0)

/* Define the bits in register CCOSR */
#define MXC_CCM_CCOSR_CKO2_EN_OFFSET			(1 << 24)
#define MXC_CCM_CCOSR_CKO2_DIV_MASK			(0x7 << MXC_CCM_CCOSR_CKO2_DIV_OFFSET)
#define MXC_CCM_CCOSR_CKO2_DIV_OFFSET			21
#define MXC_CCM_CCOSR_CKO2_SEL_OFFSET			16
#define MXC_CCM_CCOSR_CKO2_SEL_MASK			(0x1F << MXC_CCM_CCOSR_CKO2_SEL_OFFSET)
#define MXC_CCM_CCOSR_CKOL_EN				(0x1 << 7)
#define MXC_CCM_CCOSR_CKOL_DIV_MASK			(0x7 << MXC_CCM_CCOSR_CKOL_DIV_OFFSET)
#define MXC_CCM_CCOSR_CKOL_DIV_OFFSET			4
#define MXC_CCM_CCOSR_CKOL_SEL_MASK			(0xF << MXC_CCM_CCOSR_CKOL_SEL_OFFSET)
#define MXC_CCM_CCOSR_CKOL_SEL_OFFSET			0

/* Define the bits in registers CGPR */
#define MXC_CCM_CGPR_EFUSE_PROG_SUPPLY_GATE		(1 << 4)
#define MXC_CCM_CGPR_MMDC_EXT_CLK_DIS			(1 << 2)
#define MXC_CCM_CGPR_PMIC_DELAY_SCALER			(1 << 0)

/* Define the bits in registers CCGRx */
#define MXC_CCM_CCGR_CG_MASK				3

#define MXC_CCM_CCGR0_CG14_OFFSET			28
#define MXC_CCM_CCGR0_CG14_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR0_CG14_OFFSET)
#define MXC_CCM_CCGR0_CG13_OFFSET			26
#define MXC_CCM_CCGR0_CG13_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR0_CG13_OFFSET)
#define MXC_CCM_CCGR0_CG12_OFFSET			24
#define MXC_CCM_CCGR0_CG12_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR0_CG12_OFFSET)
#define MXC_CCM_CCGR0_CG11_OFFSET			22
#define MXC_CCM_CCGR0_CG11_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR0_CG11_OFFSET)
#define MXC_CCM_CCGR0_CG10_OFFSET			20
#define MXC_CCM_CCGR0_CG10_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR0_CG10_OFFSET)
#define MXC_CCM_CCGR0_CG9_OFFSET			18
#define MXC_CCM_CCGR0_CG9_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR0_CG9_OFFSET)
#define MXC_CCM_CCGR0_CG8_OFFSET			16
#define MXC_CCM_CCGR0_CG8_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR0_CG8_OFFSET)
#define MXC_CCM_CCGR0_CG7_OFFSET			14
#define MXC_CCM_CCGR0_CG6_OFFSET			12
#define MXC_CCM_CCGR0_CG5_OFFSET			10
#define MXC_CCM_CCGR0_CG5_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR0_CG5_OFFSET)
#define MXC_CCM_CCGR0_CG4_OFFSET			8
#define MXC_CCM_CCGR0_CG4_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR0_CG4_OFFSET)
#define MXC_CCM_CCGR0_CG3_OFFSET			6
#define MXC_CCM_CCGR0_CG3_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR0_CG3_OFFSET)
#define MXC_CCM_CCGR0_CG2_OFFSET			4
#define MXC_CCM_CCGR0_CG2_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR0_CG2_OFFSET)
#define MXC_CCM_CCGR0_CG1_OFFSET			2
#define MXC_CCM_CCGR0_CG1_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR0_CG1_OFFSET)
#define MXC_CCM_CCGR0_CG0_OFFSET			0
#define MXC_CCM_CCGR0_CG0_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR0_CG0_OFFSET)

#define MXC_CCM_CCGR0_DTCP_OFFSET		MXC_CCM_CCGR0_CG14_OFFSET
#define MXC_CCM_CCGR0_DCIC2_OFFSET		MXC_CCM_CCGR0_CG13_OFFSET
#define MXC_CCM_CCGR0_DCIC1_OFFSET		MXC_CCM_CCGR0_CG12_OFFSET
#define MXC_CCM_CCGR0_ARM_DBG_OFFSET		MXC_CCM_CCGR0_CG11_OFFSET
#define MXC_CCM_CCGR0_CAN2_SERIAL_OFFSET	MXC_CCM_CCGR0_CG10_OFFSET
#define MXC_CCM_CCGR0_CAN2_OFFSET		MXC_CCM_CCGR0_CG9_OFFSET
#define MXC_CCM_CCGR0_CAN1_SERIAL_OFFSET	MXC_CCM_CCGR0_CG8_OFFSET
#define MXC_CCM_CCGR0_CAN1_OFFSET		MXC_CCM_CCGR0_CG7_OFFSET
#define MXC_CCM_CCGR0_CAAM_IPG_OFFSET		MXC_CCM_CCGR0_CG6_OFFSET
#define MXC_CCM_CCGR0_CAAM_ACLK_OFFSET		MXC_CCM_CCGR0_CG5_OFFSET
#define MXC_CCM_CCGR0_CAAM_SEC_MEM_OFFSET	MXC_CCM_CCGR0_CG4_OFFSET
#define MXC_CCM_CCGR0_ASRC_OFFSET		MXC_CCM_CCGR0_CG3_OFFSET
#define MXC_CCM_CCGR0_APBHDMA_OFFSET		MXC_CCM_CCGR0_CG2_OFFSET
#define MXC_CCM_CCGR0_AIPS_TZ2_OFFSET		MXC_CCM_CCGR0_CG1_OFFSET
#define MXC_CCM_CCGR0_AIPS_TZ1_OFFSET		MXC_CCM_CCGR0_CG0_OFFSET

#define MXC_CCM_CCGR1_CG15_OFFSET			30
#define MXC_CCM_CCGR1_CG14_OFFSET			28
#define MXC_CCM_CCGR1_CG13_OFFSET			26
#define MXC_CCM_CCGR1_CG12_OFFSET			24
#define MXC_CCM_CCGR1_CG11_OFFSET			22
#define MXC_CCM_CCGR1_CG10_OFFSET			20
#define MXC_CCM_CCGR1_CG9_OFFSET			18
#define MXC_CCM_CCGR1_CG8_OFFSET			16
#define MXC_CCM_CCGR1_CG7_OFFSET			14
#define MXC_CCM_CCGR1_CG6_OFFSET			12
#define MXC_CCM_CCGR1_CG5_OFFSET			10
#define MXC_CCM_CCGR1_CG4_OFFSET			8
#define MXC_CCM_CCGR1_CG3_OFFSET			6
#define MXC_CCM_CCGR1_CG2_OFFSET			4
#define MXC_CCM_CCGR1_CG1_OFFSET			2
#define MXC_CCM_CCGR1_CG0_OFFSET			0

#define MXC_CCM_CCGR1_GPU3D_OFFSET		MXC_CCM_CCGR1_CG13_OFFSET
#define MXC_CCM_CCGR1_GPU2D_OFFSET		MXC_CCM_CCGR1_CG12_OFFSET
#define MXC_CCM_CCGR1_GPT_SERIAL_OFFSET		MXC_CCM_CCGR1_CG11_OFFSET
#define MXC_CCM_CCGR1_GPT_OFFSET		MXC_CCM_CCGR1_CG10_OFFSET
#define MXC_CCM_CCGR1_ESAI_OFFSET		MXC_CCM_CCGR1_CG8_OFFSET
#define MXC_CCM_CCGR1_EPIT2_OFFSET		MXC_CCM_CCGR1_CG7_OFFSET
#define MXC_CCM_CCGR1_EPIT1_OFFSET		MXC_CCM_CCGR1_CG6_OFFSET
#define MXC_CCM_CCGR1_ENET_OFFSET		MXC_CCM_CCGR1_CG5_OFFSET
#define MXC_CCM_CCGR1_ECSPI5_OFFSET		MXC_CCM_CCGR1_CG4_OFFSET
#define MXC_CCM_CCGR1_ECSPI4_OFFSET		MXC_CCM_CCGR1_CG3_OFFSET
#define MXC_CCM_CCGR1_ECSPI3_OFFSET		MXC_CCM_CCGR1_CG2_OFFSET
#define MXC_CCM_CCGR1_ECSPI2_OFFSET		MXC_CCM_CCGR1_CG1_OFFSET
#define MXC_CCM_CCGR1_ECSPI1_OFFSET		MXC_CCM_CCGR1_CG0_OFFSET

#define MXC_CCM_CCGR2_CG13_OFFSET			26
#define MXC_CCM_CCGR2_CG12_OFFSET			24
#define MXC_CCM_CCGR2_CG11_OFFSET			22
#define MXC_CCM_CCGR2_CG10_OFFSET			20
#define MXC_CCM_CCGR2_CG9_OFFSET			18
#define MXC_CCM_CCGR2_CG8_OFFSET			16
#define MXC_CCM_CCGR2_CG7_OFFSET			14
#define MXC_CCM_CCGR2_CG6_OFFSET			12
#define MXC_CCM_CCGR2_CG6_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR2_CG6_OFFSET)
#define MXC_CCM_CCGR2_CG5_OFFSET			10
#define MXC_CCM_CCGR2_CG4_OFFSET			8
#define MXC_CCM_CCGR2_CG3_OFFSET			6
#define MXC_CCM_CCGR2_CG2_OFFSET			4
#define MXC_CCM_CCGR2_CG1_OFFSET			2
#define MXC_CCM_CCGR2_CG0_OFFSET			0

#define MXC_CCM_CCGR2_IPSYNC_VDOA_IPG_MASTER_OFFSET MXC_CCM_CCGR2_CG13_OFFSET
#define MXC_CCM_CCGR2_IPSYNC_VDOA_IPG_TZASC2_OFFSET MXC_CCM_CCGR2_CG12_OFFSET
#define MXC_CCM_CCGR2_IPSYNC_IP2APB_TZASC1__OFFSET MXC_CCM_CCGR2_CG11_OFFSET
#define MXC_CCM_CCGR2_IPMUX3_OFFSET		MXC_CCM_CCGR2_CG10_OFFSET
#define MXC_CCM_CCGR2_IPMUX2_OFFSET		MXC_CCM_CCGR2_CG9_OFFSET
#define MXC_CCM_CCGR2_IPMUX1_OFFSET		MXC_CCM_CCGR2_CG8_OFFSET
#define MXC_CCM_CCGR2_IOMUX_IPT_OFFSET		MXC_CCM_CCGR2_CG7_OFFSET
#define MXC_CCM_CCGR2_OCOTP_OFFSET		MXC_CCM_CCGR2_CG6_OFFSET
#define MXC_CCM_CCGR2_I2C3_SERIAL_OFFSET	MXC_CCM_CCGR2_CG5_OFFSET
#define MXC_CCM_CCGR2_I2C2_SERIAL_OFFSET	MXC_CCM_CCGR2_CG4_OFFSET
#define MXC_CCM_CCGR2_I2C1_SERIAL_OFFSET	MXC_CCM_CCGR2_CG3_OFFSET
#define MXC_CCM_CCGR2_HDMI_TX_ISFR_OFFSET	MXC_CCM_CCGR2_CG2_OFFSET
#define MXC_CCM_CCGR2_HDMI_TX_IAHB_OFFSET	MXC_CCM_CCGR2_CG0_OFFSET

#define MXC_CCM_CCGR3_CG15_OFFSET			30
#define MXC_CCM_CCGR3_CG14_OFFSET			28
#define MXC_CCM_CCGR3_CG13_OFFSET			26
#define MXC_CCM_CCGR3_CG12_OFFSET			24
#define MXC_CCM_CCGR3_CG11_OFFSET			22
#define MXC_CCM_CCGR3_CG10_OFFSET			20
#define MXC_CCM_CCGR3_CG9_OFFSET			18
#define MXC_CCM_CCGR3_CG8_OFFSET			16
#define MXC_CCM_CCGR3_CG7_OFFSET			14
#define MXC_CCM_CCGR3_CG6_OFFSET			12
#define MXC_CCM_CCGR3_CG5_OFFSET			10
#define MXC_CCM_CCGR3_CG4_OFFSET			8
#define MXC_CCM_CCGR3_CG3_OFFSET			6
#define MXC_CCM_CCGR3_CG2_OFFSET			4
#define MXC_CCM_CCGR3_CG1_OFFSET			2
#define MXC_CCM_CCGR3_CG0_OFFSET			0
#define MXC_CCM_CCGR3_CG0_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR3_CG0_OFFSET)

#define MXC_CCM_CCGR3_OPENVGAXI_OFFSET		MXC_CCM_CCGR3_CG15_OFFSET
#define MXC_CCM_CCGR3_OCRAM_OFFSET		MXC_CCM_CCGR3_CG14_OFFSET
#define MXC_CCM_CCGR3_MMDC_CORE_IPG_P1_OFFSET	MXC_CCM_CCGR3_CG13_OFFSET
#define MXC_CCM_CCGR3_MMDC_CORE_IPG_P0_OFFSET	MXC_CCM_CCGR3_CG12_OFFSET
#define MXC_CCM_CCGR3_MMDC_CORE_ACLK_FAST_P1_OFFSET MXC_CCM_CCGR3_CG11_OFFSET
#define MXC_CCM_CCGR3_MMDC_CORE_ACLK_FAST_P0_OFFSET MXC_CCM_CCGR3_CG10_OFFSET
#define MXC_CCM_CCGR3_MLB_OFFSET		MXC_CCM_CCGR3_CG9_OFFSET
#define MXC_CCM_CCGR3_MIPI_CORE_CFG_OFFSET	MXC_CCM_CCGR3_CG8_OFFSET
#define MXC_CCM_CCGR3_LDB_DI1_OFFSET		MXC_CCM_CCGR3_CG7_OFFSET
#define MXC_CCM_CCGR3_LDB_DI0_OFFSET		MXC_CCM_CCGR3_CG6_OFFSET
#define MXC_CCM_CCGR3_IPU2_DI1_OFFSET		MXC_CCM_CCGR3_CG5_OFFSET
#define MXC_CCM_CCGR3_IPU2_DI0_OFFSET		MXC_CCM_CCGR3_CG4_OFFSET
#define MXC_CCM_CCGR3_IPU2_IPU_OFFSET		MXC_CCM_CCGR3_CG3_OFFSET
#define MXC_CCM_CCGR3_IPU1_DI1_OFFSET		MXC_CCM_CCGR3_CG2_OFFSET
#define MXC_CCM_CCGR3_IPU1_DI0_OFFSET		MXC_CCM_CCGR3_CG1_OFFSET
#define MXC_CCM_CCGR3_IPU1_IPU_OFFSET		MXC_CCM_CCGR3_CG0_OFFSET

#define MXC_CCM_CCGR4_CG15_OFFSET			30
#define MXC_CCM_CCGR4_CG14_OFFSET			28
#define MXC_CCM_CCGR4_CG13_OFFSET			26
#define MXC_CCM_CCGR4_CG12_OFFSET			24
#define MXC_CCM_CCGR4_CG11_OFFSET			22
#define MXC_CCM_CCGR4_CG10_OFFSET			20
#define MXC_CCM_CCGR4_CG9_OFFSET			18
#define MXC_CCM_CCGR4_CG8_OFFSET			16
#define MXC_CCM_CCGR4_CG7_OFFSET			14
#define MXC_CCM_CCGR4_CG6_OFFSET			12
#define MXC_CCM_CCGR4_CG5_OFFSET			10
#define MXC_CCM_CCGR4_CG4_OFFSET			8
#define MXC_CCM_CCGR4_CG3_OFFSET			6
#define MXC_CCM_CCGR4_CG2_OFFSET			4
#define MXC_CCM_CCGR4_CG1_OFFSET			2
#define MXC_CCM_CCGR4_CG0_OFFSET			0

#if 0
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG15_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG14_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG13_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG12_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG11_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG10_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG9_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG8_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG7_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG6_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG5_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG4_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG3_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG2_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG1_OFFSET
#define MXC_CCM_CCGR4__OFFSET		MXC_CCM_CCGR4_CG0_OFFSET
#endif

#define MXC_CCM_CCGR5_CG15_OFFSET			30
#define MXC_CCM_CCGR5_CG14_OFFSET			28
#define MXC_CCM_CCGR5_CG14_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR5_CG14_OFFSET)
#define MXC_CCM_CCGR5_CG13_OFFSET			26
#define MXC_CCM_CCGR5_CG13_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR5_CG13_OFFSET)
#define MXC_CCM_CCGR5_CG12_OFFSET			24
#define MXC_CCM_CCGR5_CG12_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR5_CG12_OFFSET)
#define MXC_CCM_CCGR5_CG11_OFFSET			22
#define MXC_CCM_CCGR5_CG11_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR5_CG11_OFFSET)
#define MXC_CCM_CCGR5_CG10_OFFSET			20
#define MXC_CCM_CCGR5_CG10_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR5_CG10_OFFSET)
#define MXC_CCM_CCGR5_CG9_OFFSET			18
#define MXC_CCM_CCGR5_CG9_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR5_CG9_OFFSET)
#define MXC_CCM_CCGR5_CG8_OFFSET			16
#define MXC_CCM_CCGR5_CG8_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR5_CG8_OFFSET)
#define MXC_CCM_CCGR5_CG7_OFFSET			14
#define MXC_CCM_CCGR5_CG7_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR5_CG7_OFFSET)
#define MXC_CCM_CCGR5_CG6_OFFSET			12
#define MXC_CCM_CCGR5_CG6_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR5_CG6_OFFSET)
#define MXC_CCM_CCGR5_CG5_OFFSET			10
#define MXC_CCM_CCGR5_CG4_OFFSET			8
#define MXC_CCM_CCGR5_CG3_OFFSET			6
#define MXC_CCM_CCGR5_CG2_OFFSET			4
#define MXC_CCM_CCGR5_CG2_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR5_CG2_OFFSET)
#define MXC_CCM_CCGR5_CG1_OFFSET			2
#define MXC_CCM_CCGR5_CG0_OFFSET			0

#if 0
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG15_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG14_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG13_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG12_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG11_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG10_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG9_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG8_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG7_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG6_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG5_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG4_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG3_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG1_OFFSET
#define MXC_CCM_CCGR5__OFFSET		MXC_CCM_CCGR5_CG0_OFFSET
#endif
#define MXC_CCM_CCGR5_SATA_MASK		MXC_CCM_CCGR5_CG2_MASK

#define MXC_CCM_CCGR6_CG15_OFFSET			30
#define MXC_CCM_CCGR6_CG14_OFFSET			28
#define MXC_CCM_CCGR6_CG14_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR6_CG14_OFFSET)
#define MXC_CCM_CCGR6_CG13_OFFSET			26
#define MXC_CCM_CCGR6_CG13_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR6_CG13_OFFSET)
#define MXC_CCM_CCGR6_CG12_OFFSET			24
#define MXC_CCM_CCGR6_CG12_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR6_CG12_OFFSET)
#define MXC_CCM_CCGR6_CG11_OFFSET			22
#define MXC_CCM_CCGR6_CG11_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR6_CG11_OFFSET)
#define MXC_CCM_CCGR6_CG10_OFFSET			20
#define MXC_CCM_CCGR6_CG10_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR6_CG10_OFFSET)
#define MXC_CCM_CCGR6_CG9_OFFSET			18
#define MXC_CCM_CCGR6_CG9_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR6_CG9_OFFSET)
#define MXC_CCM_CCGR6_CG8_OFFSET			16
#define MXC_CCM_CCGR6_CG8_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR6_CG8_OFFSET)
#define MXC_CCM_CCGR6_CG7_OFFSET			14
#define MXC_CCM_CCGR6_CG7_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR6_CG7_OFFSET)
#define MXC_CCM_CCGR6_CG6_OFFSET			12
#define MXC_CCM_CCGR6_CG6_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR6_CG6_OFFSET)
#define MXC_CCM_CCGR6_CG5_OFFSET			10
#define MXC_CCM_CCGR6_CG4_OFFSET			8
#define MXC_CCM_CCGR6_CG3_OFFSET			6
#define MXC_CCM_CCGR6_CG2_OFFSET			4
#define MXC_CCM_CCGR6_CG2_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR6_CG2_OFFSET)
#define MXC_CCM_CCGR6_CG1_OFFSET			2
#define MXC_CCM_CCGR6_CG1_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR6_CG1_OFFSET)
#define MXC_CCM_CCGR6_CG0_OFFSET			0
#define MXC_CCM_CCGR6_CG0_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR6_CG0_OFFSET)

#if 0
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG15_OFFSET
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG14_OFFSET
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG13_OFFSET
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG12_OFFSET
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG11_OFFSET
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG10_OFFSET
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG9_OFFSET
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG8_OFFSET
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG7_OFFSET
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG6_OFFSET
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG5_OFFSET
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG4_OFFSET
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG3_OFFSET
#define MXC_CCM_CCGR6__OFFSET		MXC_CCM_CCGR6_CG2_OFFSET
#endif
#define MXC_CCM_CCGR6_USDHC1_MASK	MXC_CCM_CCGR6_CG1_MASK
#define MXC_CCM_CCGR6_USBOH3_MASK	MXC_CCM_CCGR6_CG0_MASK

#define MXC_CCM_CCGR7_CG15_OFFSET			30
#define MXC_CCM_CCGR7_CG14_OFFSET			28
#define MXC_CCM_CCGR7_CG14_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR7_CG14_OFFSET)
#define MXC_CCM_CCGR7_CG13_OFFSET			26
#define MXC_CCM_CCGR7_CG13_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR7_CG13_OFFSET)
#define MXC_CCM_CCGR7_CG12_OFFSET			24
#define MXC_CCM_CCGR7_CG12_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR7_CG12_OFFSET)
#define MXC_CCM_CCGR7_CG11_OFFSET			22
#define MXC_CCM_CCGR7_CG11_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR7_CG11_OFFSET)
#define MXC_CCM_CCGR7_CG10_OFFSET			20
#define MXC_CCM_CCGR7_CG10_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR7_CG10_OFFSET)
#define MXC_CCM_CCGR7_CG9_OFFSET			18
#define MXC_CCM_CCGR7_CG9_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR7_CG9_OFFSET)
#define MXC_CCM_CCGR7_CG8_OFFSET			16
#define MXC_CCM_CCGR7_CG8_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR7_CG8_OFFSET)
#define MXC_CCM_CCGR7_CG7_OFFSET			14
#define MXC_CCM_CCGR7_CG7_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR7_CG7_OFFSET)
#define MXC_CCM_CCGR7_CG6_OFFSET			12
#define MXC_CCM_CCGR7_CG6_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR7_CG6_OFFSET)
#define MXC_CCM_CCGR7_CG5_OFFSET			10
#define MXC_CCM_CCGR7_CG4_OFFSET			8
#define MXC_CCM_CCGR7_CG3_OFFSET			6
#define MXC_CCM_CCGR7_CG2_OFFSET			4
#define MXC_CCM_CCGR7_CG2_MASK			(MXC_CCM_CCGR_CG_MASK << MXC_CCM_CCGR7_CG2_OFFSET)
#define MXC_CCM_CCGR7_CG1_OFFSET			2
#define MXC_CCM_CCGR7_CG0_OFFSET			0

#if 0
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG15_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG14_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG13_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG12_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG11_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG10_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG9_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG8_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG7_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG6_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG5_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG4_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG3_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG2_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG1_OFFSET
#define MXC_CCM_CCGR7__OFFSET		MXC_CCM_CCGR7_CG0_OFFSET
#endif

struct anatop_regs {
	mx6_reg_32(pll_arm);		/* 0x000 */
	mx6_reg_32(usb1_pll_480_ctrl);	/* 0x010 */
	mx6_reg_32(usb2_pll_480_ctrl);	/* 0x020 */
	mx6_reg_32(pll_528);		/* 0x030 */
	reg_32(pll_528_ss);		/* 0x040 */
	reg_32(pll_528_num);		/* 0x050 */
	reg_32(pll_528_denom);		/* 0x060 */
	mx6_reg_32(pll_audio);		/* 0x070 */
	reg_32(pll_audio_num);		/* 0x080 */
	reg_32(pll_audio_denom);	/* 0x090 */
	mx6_reg_32(pll_video);		/* 0x0a0 */
	reg_32(pll_video_num);		/* 0x0b0 */
	reg_32(pll_video_denom);	/* 0x0c0 */
	mx6_reg_32(pll_mlb);		/* 0x0d0 */
	mx6_reg_32(pll_enet);		/* 0x0e0 */
	mx6_reg_32(pfd_480);		/* 0x0f0 */
	mx6_reg_32(pfd_528);		/* 0x100 */
	mx6_reg_32(reg_1p1);		/* 0x110 */
	mx6_reg_32(reg_3p0);		/* 0x120 */
	mx6_reg_32(reg_2p5);		/* 0x130 */
	mx6_reg_32(reg_core);		/* 0x140 */
	mx6_reg_32(ana_misc0);		/* 0x150 */
	mx6_reg_32(ana_misc1);		/* 0x160 */
	mx6_reg_32(ana_misc2);		/* 0x170 */
	mx6_reg_32(tempsense0);		/* 0x180 */
	mx6_reg_32(tempsense1);		/* 0x190 */
	mx6_reg_32(usb1_vbus_detect);	/* 0x1a0 */
	mx6_reg_32(usb1_chrg_detect);	/* 0x1b0 */
	mx6_reg_32(usb1_vbus_det_stat);	/* 0x1c0 */
	mx6_reg_32(usb1_chrg_det_stat);	/* 0x1d0 */
	mx6_reg_32(usb1_loopback);	/* 0x1e0 */
	mx6_reg_32(usb1_misc);		/* 0x1f0 */
	mx6_reg_32(usb2_vbus_detect);	/* 0x200 */
	mx6_reg_32(usb2_chrg_detect);	/* 0x210 */
	mx6_reg_32(usb2_vbus_det_stat);	/* 0x220 */
	mx6_reg_32(usb2_chrg_det_stat);	/* 0x230 */
	mx6_reg_32(usb2_loopback);	/* 0x240 */
	mx6_reg_32(usb2_misc);		/* 0x250 */
	reg_32(digprog);		/* 0x260 */
	reg_32(rsrvd);			/* 0x270 */
	reg_32(digprog_sololite);	/* 0x280 */
};

#define ANATOP_PFD_480_PFD0_FRAC_SHIFT				0
#define ANATOP_PFD_480_PFD0_FRAC_MASK				(0x3f << ANATOP_PFD_480_PFD0_FRAC_SHIFT)
#define ANATOP_PFD_480_PFD0_STABLE_SHIFT			6
#define ANATOP_PFD_480_PFD0_STABLE_MASK				(1 << ANATOP_PFD_480_PFD0_STABLE_SHIFT)
#define ANATOP_PFD_480_PFD0_CLKGATE_SHIFT			7
#define ANATOP_PFD_480_PFD0_CLKGATE_MASK			(1 << ANATOP_PFD_480_PFD0_CLKGATE_SHIFT)
#define ANATOP_PFD_480_PFD1_FRAC_SHIFT				8
#define ANATOP_PFD_480_PFD1_FRAC_MASK				(0x3f << ANATOP_PFD_480_PFD1_FRAC_SHIFT)
#define ANATOP_PFD_480_PFD1_STABLE_SHIFT			14
#define ANATOP_PFD_480_PFD1_STABLE_MASK				(1 << ANATOP_PFD_480_PFD1_STABLE_SHIFT)
#define ANATOP_PFD_480_PFD1_CLKGATE_SHIFT			15
#define ANATOP_PFD_480_PFD1_CLKGATE_MASK			(0x3f << ANATOP_PFD_480_PFD1_CLKGATE_SHIFT)
#define ANATOP_PFD_480_PFD2_FRAC_SHIFT				16
#define ANATOP_PFD_480_PFD2_FRAC_MASK				(1 << ANATOP_PFD_480_PFD2_FRAC_SHIFT)
#define ANATOP_PFD_480_PFD2_STABLE_SHIFT			22
#define ANATOP_PFD_480_PFD2_STABLE_MASK				(1 << ANATOP_PFD_480_PFD2_STABLE_SHIFT)
#define ANATOP_PFD_480_PFD2_CLKGATE_SHIFT			23
#define ANATOP_PFD_480_PFD2_CLKGATE_MASK			(0x3f << ANATOP_PFD_480_PFD2_CLKGATE_SHIFT)
#define ANATOP_PFD_480_PFD3_FRAC_SHIFT				24
#define ANATOP_PFD_480_PFD3_FRAC_MASK				(1 << ANATOP_PFD_480_PFD3_FRAC_SHIFT)
#define ANATOP_PFD_480_PFD3_STABLE_SHIFT			30
#define ANATOP_PFD_480_PFD3_STABLE_MASK				(1 << ANATOP_PFD_480_PFD3_STABLE_SHIFT)
#define ANATOP_PFD_480_PFD3_CLKGATE_SHIFT			31

#define BM_ANADIG_PLL_ARM_LOCK					(1 << 31)
#define BM_ANADIG_PLL_ARM_PLL_SEL				(1 << 19)
#define BM_ANADIG_PLL_ARM_LVDS_24MHZ_SEL			(1 << 18)
#define BM_ANADIG_PLL_ARM_LVDS_SEL				(1 << 17)
#define BM_ANADIG_PLL_ARM_BYPASS				(1 << 16)
#define BP_ANADIG_PLL_ARM_BYPASS_CLK_SRC			14
#define BM_ANADIG_PLL_ARM_BYPASS_CLK_SRC			(0x3 << BP_ANADIG_PLL_ARM_BYPASS_CLK_SRC)
#define BF_ANADIG_PLL_ARM_BYPASS_CLK_SRC(v)				\
	(((v) << BP_ANADIG_PLL_ARM_BYPASS_CLK_SRC) & BM_ANADIG_PLL_ARM_BYPASS_CLK_SRC)
#define BV_ANADIG_PLL_ARM_BYPASS_CLK_SRC__OSC_24M		BF_ANADIG_PLL_ARM_BYPASS_CLK_SRC(0)
#define BV_ANADIG_PLL_ARM_BYPASS_CLK_SRC__ANACLK_1		BF_ANADIG_PLL_ARM_BYPASS_CLK_SRC(1)
#define BV_ANADIG_PLL_ARM_BYPASS_CLK_SRC__ANACLK_2		BF_ANADIG_PLL_ARM_BYPASS_CLK_SRC(2)
#define BV_ANADIG_PLL_ARM_BYPASS_CLK_SRC__XOR			BF_ANADIG_PLL_ARM_BYPASS_CLK_SRC(3)
#define BM_ANADIG_PLL_ARM_ENABLE				(1 << 13)
#define BM_ANADIG_PLL_ARM_POWERDOWN				(1 << 12)
#define BM_ANADIG_PLL_ARM_HOLD_RING_OFF				(1 << 11)
#define BM_ANADIG_PLL_ARM_DOUBLE_CP				(1 << 10)
#define BM_ANADIG_PLL_ARM_HALF_CP				(1 << 9)
#define BM_ANADIG_PLL_ARM_DOUBLE_LF				(1 << 8)
#define BM_ANADIG_PLL_ARM_HALF_LF				(1 << 7)
#define BP_ANADIG_PLL_ARM_DIV_SELECT				0
#define BM_ANADIG_PLL_ARM_DIV_SELECT				(0x7F << BP_ANADIG_PLL_ARM_DIV_SELECT)
#define BF_ANADIG_PLL_ARM_DIV_SELECT(v)			\
	(((v) << BP_ANADIG_PLL_ARM_DIV_SELECT) &	\
		BM_ANADIG_PLL_ARM_DIV_SELECT)

#define BM_ANADIG_USB1_PLL_480_CTRL_LOCK			(1 << 31)
#define BM_ANADIG_USB1_PLL_480_CTRL_BYPASS			(1 << 16)
#define BP_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC		14
#define BM_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC		(0x3 << BP_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC)
#define BF_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC(v)			\
	(((v) << BP_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC) &		\
		BM_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC)
#define BV_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC__OSC_24M	BF_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC(0)
#define BV_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC__ANACLK_1	BF_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC(1)
#define BV_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC__ANACLK_2	BF_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC(2)
#define BV_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC__XOR		BF_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC(3)
#define BM_ANADIG_USB1_PLL_480_CTRL_ENABLE			(1 << 13)
#define BM_ANADIG_USB1_PLL_480_CTRL_POWER			(1 << 12)
#define BM_ANADIG_USB1_PLL_480_CTRL_HOLD_RING_OFF		(1 << 11)
#define BM_ANADIG_USB1_PLL_480_CTRL_DOUBLE_CP			(1 << 10)
#define BM_ANADIG_USB1_PLL_480_CTRL_HALF_CP			(1 << 9)
#define BM_ANADIG_USB1_PLL_480_CTRL_DOUBLE_LF			(1 << 8)
#define BM_ANADIG_USB1_PLL_480_CTRL_HALF_LF			(1 << 7)
#define BM_ANADIG_USB1_PLL_480_CTRL_EN_USB_CLKS			(1 << 6)
#define BP_ANADIG_USB1_PLL_480_CTRL_CONTROL0			2
#define BM_ANADIG_USB1_PLL_480_CTRL_CONTROL0			(0x7 << BP_ANADIG_USB1_PLL_480_CTRL_CONTROL0)
#define BF_ANADIG_USB1_PLL_480_CTRL_CONTROL0(v)			\
	(((v) << BP_ANADIG_USB1_PLL_480_CTRL_CONTROL0) &	\
		BM_ANADIG_USB1_PLL_480_CTRL_CONTROL0)
#define BP_ANADIG_USB1_PLL_480_CTRL_DIV_SELECT			0
#define BM_ANADIG_USB1_PLL_480_CTRL_DIV_SELECT			(0x3 << BP_ANADIG_USB1_PLL_480_CTRL_DIV_SELECT)
#define BF_ANADIG_USB1_PLL_480_CTRL_DIV_SELECT(v)		\
	(((v) << BP_ANADIG_USB1_PLL_480_CTRL_DIV_SELECT) &	\
		BM_ANADIG_USB1_PLL_480_CTRL_DIV_SELECT)

#define BM_ANADIG_USB2_PLL_480_CTRL_LOCK			(1 << 31)
#define BM_ANADIG_USB2_PLL_480_CTRL_BYPASS			(1 << 16)
#define BP_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC		14
#define BM_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC		(0x3 << BP_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC)
#define BF_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC(v)		\
	(((v) << BP_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC) &	\
		BM_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC)
#define BV_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC__OSC_24M	BF_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC(0)
#define BV_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC__ANACLK_1	BF_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC(1)
#define BV_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC__ANACLK_2	BF_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC(2)
#define BV_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC__XOR		BF_ANADIG_USB2_PLL_480_CTRL_BYPASS_CLK_SRC(3)
#define BM_ANADIG_USB2_PLL_480_CTRL_ENABLE			(1 << 13)
#define BM_ANADIG_USB2_PLL_480_CTRL_POWER			(1 << 12)
#define BM_ANADIG_USB2_PLL_480_CTRL_HOLD_RING_OFF		(1 << 11)
#define BM_ANADIG_USB2_PLL_480_CTRL_DOUBLE_CP			(1 << 10)
#define BM_ANADIG_USB2_PLL_480_CTRL_HALF_CP			(1 << 9)
#define BM_ANADIG_USB2_PLL_480_CTRL_DOUBLE_LF			(1 << 8)
#define BM_ANADIG_USB2_PLL_480_CTRL_HALF_LF			(1 << 7)
#define BM_ANADIG_USB2_PLL_480_CTRL_EN_USB_CLKS			(1 << 6)
#define BP_ANADIG_USB2_PLL_480_CTRL_CONTROL0			2
#define BM_ANADIG_USB2_PLL_480_CTRL_CONTROL0			(0x7 << BP_ANADIG_USB2_PLL_480_CTRL_CONTROL0)
#define BF_ANADIG_USB2_PLL_480_CTRL_CONTROL0(v)			\
	(((v) << BP_ANADIG_USB2_PLL_480_CTRL_CONTROL0) &	\
		BM_ANADIG_USB2_PLL_480_CTRL_CONTROL0)
#define BP_ANADIG_USB2_PLL_480_CTRL_DIV_SELECT			0
#define BM_ANADIG_USB2_PLL_480_CTRL_DIV_SELECT			(0x3 << BP_ANADIG_USB2_PLL_480_CTRL_DIV_SELECT)
#define BF_ANADIG_USB2_PLL_480_CTRL_DIV_SELECT(v)		\
	(((v) << BP_ANADIG_USB2_PLL_480_CTRL_DIV_SELECT) &	\
		BM_ANADIG_USB2_PLL_480_CTRL_DIV_SELECT)

#define BM_ANADIG_PLL_SYS_LOCK					(1 << 31)
#define BM_ANADIG_PLL_SYS_PLL_SEL				(1 << 19)
#define BM_ANADIG_PLL_SYS_LVDS_24MHZ_SEL			(1 << 18)
#define BM_ANADIG_PLL_SYS_LVDS_SEL				(1 << 17)
#define BM_ANADIG_PLL_SYS_BYPASS				(1 << 16)
#define BP_ANADIG_PLL_SYS_BYPASS_CLK_SRC			14
#define BM_ANADIG_PLL_SYS_BYPASS_CLK_SRC			(0x3 << BP_ANADIG_PLL_SYS_BYPASS_CLK_SRC)
#define BF_ANADIG_PLL_SYS_BYPASS_CLK_SRC(v)				\
	(((v) << BP_ANADIG_PLL_SYS_BYPASS_CLK_SRC) & BM_ANADIG_PLL_SYS_BYPASS_CLK_SRC)
#define BV_ANADIG_PLL_SYS_BYPASS_CLK_SRC__OSC_24M		0x0
#define BV_ANADIG_PLL_SYS_BYPASS_CLK_SRC__ANACLK_1		0x1
#define BV_ANADIG_PLL_SYS_BYPASS_CLK_SRC__ANACLK_2		0x2
#define BV_ANADIG_PLL_SYS_BYPASS_CLK_SRC__XOR			0x3
#define BM_ANADIG_PLL_SYS_ENABLE				(1 << 13)
#define BM_ANADIG_PLL_SYS_POWERDOWN				(1 << 12)
#define BM_ANADIG_PLL_SYS_HOLD_RING_OFF				(1 << 11)
#define BM_ANADIG_PLL_SYS_DOUBLE_CP				(1 << 10)
#define BM_ANADIG_PLL_SYS_HALF_CP				(1 << 9)
#define BM_ANADIG_PLL_SYS_DOUBLE_LF				(1 << 8)
#define BM_ANADIG_PLL_SYS_HALF_LF				(1 << 7)
#define BP_ANADIG_PLL_SYS_DIV_SELECT				0
#define BM_ANADIG_PLL_SYS_DIV_SELECT				(0x7F << BP_ANADIG_PLL_SYS_DIV_SELECT)
#define BF_ANADIG_PLL_SYS_DIV_SELECT(v)					\
	(((v) << BP_ANADIG_PLL_SYS_DIV_SELECT) & BM_ANADIG_PLL_SYS_DIV_SELECT)

#define BM_ANADIG_PLL_AUDIO_LOCK				(1 << 31)
#define BM_ANADIG_PLL_AUDIO_SSC_EN				(1 << 21)
#define BP_ANADIG_PLL_AUDIO_TEST_DIV_SELECT			19
#define BM_ANADIG_PLL_AUDIO_TEST_DIV_SELECT			(0x3 << BP_ANADIG_PLL_AUDIO_TEST_DIV_SELECT)
#define BF_ANADIG_PLL_AUDIO_TEST_DIV_SELECT(v)				\
	(((v) << BP_ANADIG_PLL_AUDIO_TEST_DIV_SELECT) & BM_ANADIG_PLL_AUDIO_TEST_DIV_SELECT)
#define BM_ANADIG_PLL_AUDIO_PFD_OFFSET_EN			(1 << 18)
#define BM_ANADIG_PLL_AUDIO_DITHER_ENABLE			(1 << 17)
#define BM_ANADIG_PLL_AUDIO_BYPASS				(1 << 16)
#define BP_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC			14
#define BM_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC			(0x3 << BP_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC)
#define BF_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC(v)		\
	(((v) << BP_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC) & BM_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC)
#define BV_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC__OSC_24M		0x0
#define BV_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC__ANACLK_1		0x1
#define BV_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC__ANACLK_2		0x2
#define BV_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC__XOR			0x3
#define BM_ANADIG_PLL_AUDIO_ENABLE				(1 << 13)
#define BM_ANADIG_PLL_AUDIO_POWERDOWN				(1 << 12)
#define BM_ANADIG_PLL_AUDIO_HOLD_RING_OFF			(1 << 11)
#define BM_ANADIG_PLL_AUDIO_DOUBLE_CP				(1 << 10)
#define BM_ANADIG_PLL_AUDIO_HALF_CP				(1 << 9)
#define BM_ANADIG_PLL_AUDIO_DOUBLE_LF				(1 << 8)
#define BM_ANADIG_PLL_AUDIO_HALF_LF				(1 << 7)
#define BP_ANADIG_PLL_AUDIO_DIV_SELECT				0
#define BM_ANADIG_PLL_AUDIO_DIV_SELECT				(0x7F << BP_ANADIG_PLL_AUDIO_DIV_SELECT)
#define BF_ANADIG_PLL_AUDIO_DIV_SELECT(v)				\
	(((v) << BP_ANADIG_PLL_AUDIO_DIV_SELECT) & BM_ANADIG_PLL_AUDIO_DIV_SELECT)

#define BP_ANADIG_PLL_AUDIO_NUM_A				0
#define BM_ANADIG_PLL_AUDIO_NUM_A				0x3FFFFFFF
#define BF_ANADIG_PLL_AUDIO_NUM_A(v)					\
	(((v) << BP_ANADIG_PLL_AUDIO_NUM_A) & BM_ANADIG_PLL_AUDIO_NUM_A)

#define BP_ANADIG_PLL_AUDIO_DENOM_B				0
#define BM_ANADIG_PLL_AUDIO_DENOM_B				0x3FFFFFFF
#define BF_ANADIG_PLL_AUDIO_DENOM_B(v)					\
	(((v) << BP_ANADIG_PLL_AUDIO_DENOM_B) & BM_ANADIG_PLL_AUDIO_DENOM_B)

#define BM_ANADIG_PLL_VIDEO_LOCK				(1 << 31)
#define BM_ANADIG_PLL_VIDEO_SSC_EN				(1 << 21)
#define BP_ANADIG_PLL_VIDEO_TEST_DIV_SELECT			19
#define BM_ANADIG_PLL_VIDEO_TEST_DIV_SELECT			(0x3 << BP_ANADIG_PLL_VIDEO_TEST_DIV_SELECT)
#define BF_ANADIG_PLL_VIDEO_TEST_DIV_SELECT(v)				\
	(((v) << BP_ANADIG_PLL_VIDEO_TEST_DIV_SELECT) & BM_ANADIG_PLL_VIDEO_TEST_DIV_SELECT)
#define BM_ANADIG_PLL_VIDEO_PFD_OFFSET_EN			(1 << 18)
#define BM_ANADIG_PLL_VIDEO_DITHER_ENABLE			(1 << 17)
#define BM_ANADIG_PLL_VIDEO_BYPASS				(1 << 16)
#define BP_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC			14
#define BM_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC			(0x3 << BP_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC)
#define BF_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC(v)				\
	(((v) << BP_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC) & BM_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC)
#define BV_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC__OSC_24M		0x0
#define BV_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC__ANACLK_1		0x1
#define BV_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC__ANACLK_2		0x2
#define BV_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC__XOR			0x3
#define BM_ANADIG_PLL_VIDEO_ENABLE				(1 << 13)
#define BM_ANADIG_PLL_VIDEO_POWERDOWN				(1 << 12)
#define BM_ANADIG_PLL_VIDEO_HOLD_RING_OFF			(1 << 11)
#define BM_ANADIG_PLL_VIDEO_DOUBLE_CP				(1 << 10)
#define BM_ANADIG_PLL_VIDEO_HALF_CP				(1 << 9)
#define BM_ANADIG_PLL_VIDEO_DOUBLE_LF				(1 << 8)
#define BM_ANADIG_PLL_VIDEO_HALF_LF				(1 << 7)
#define BP_ANADIG_PLL_VIDEO_DIV_SELECT				0
#define BM_ANADIG_PLL_VIDEO_DIV_SELECT				(0x7F << BP_ANADIG_PLL_VIDEO_DIV_SELECT)
#define BF_ANADIG_PLL_VIDEO_DIV_SELECT(v)				\
	(((v) << BP_ANADIG_PLL_VIDEO_DIV_SELECT) & BM_ANADIG_PLL_VIDEO_DIV_SELECT)

#define BP_ANADIG_PLL_VIDEO_NUM_A				0
#define BM_ANADIG_PLL_VIDEO_NUM_A				(0x3FFFFFFF << BP_ANADIG_PLL_VIDEO_NUM_A)
#define BF_ANADIG_PLL_VIDEO_NUM_A(v)					\
	(((v) << BP_ANADIG_PLL_VIDEO_NUM_A) & BM_ANADIG_PLL_VIDEO_NUM_A)

#define BP_ANADIG_PLL_VIDEO_DENOM_B				0
#define BM_ANADIG_PLL_VIDEO_DENOM_B				(0x3FFFFFFF << BP_ANADIG_PLL_VIDEO_DENOM_B)
#define BF_ANADIG_PLL_VIDEO_DENOM_B(v)					\
	(((v) << BP_ANADIG_PLL_VIDEO_DENOM_B) & BM_ANADIG_PLL_VIDEO_DENOM_B)

#define BM_ANADIG_PLL_MLB_LOCK					(1 << 31)
#define BP_ANADIG_PLL_MLB_MLB_FLT_RES_DLY_CFG			26
#define BM_ANADIG_PLL_MLB_MLB_FLT_RES_DLY_CFG			(0x7 << BP_ANADIG_PLL_MLB_MLB_FLT_RES_DLY_CFG)
#define BF_ANADIG_PLL_MLB_MLB_FLT_RES_DLY_CFG(v)			\
	(((v) << BP_ANADIG_PLL_MLB_MLB_FLT_RES_DLY_CFG) & BM_ANADIG_PLL_MLB_MLB_FLT_RES_DLY_CFG)
#define BP_ANADIG_PLL_MLB_RX_CLK_DLY_CFG			23
#define BM_ANADIG_PLL_MLB_RX_CLK_DLY_CFG			(0x7 << BP_ANADIG_PLL_MLB_RX_CLK_DLY_CFG)
#define BF_ANADIG_PLL_MLB_RX_CLK_DLY_CFG(v)				\
	(((v) << BP_ANADIG_PLL_MLB_RX_CLK_DLY_CFG) & BM_ANADIG_PLL_MLB_RX_CLK_DLY_CFG)
#define BP_ANADIG_PLL_MLB_VDDD_DLY_CFG				20
#define BM_ANADIG_PLL_MLB_VDDD_DLY_CFG				(0x7 << BP_ANADIG_PLL_MLB_VDDD_DLY_CFG)
#define BF_ANADIG_PLL_MLB_VDDD_DLY_CFG(v)				\
	(((v) << BP_ANADIG_PLL_MLB_VDDD_DLY_CFG) & BM_ANADIG_PLL_MLB_VDDD_DLY_CFG)
#define BP_ANADIG_PLL_MLB_VDDA_DLY_CFG				17
#define BM_ANADIG_PLL_MLB_VDDA_DLY_CFG				(0x7 << BP_ANADIG_PLL_MLB_VDDA_DLY_CFG)
#define BF_ANADIG_PLL_MLB_VDDA_DLY_CFG(v)				\
	(((v) << BP_ANADIG_PLL_MLB_VDDA_DLY_CFG) & BM_ANADIG_PLL_MLB_VDDA_DLY_CFG)
#define BM_ANADIG_PLL_MLB_BYPASS				(1 << 16)
#define BP_ANADIG_PLL_MLB_PHASE_SEL				12
#define BM_ANADIG_PLL_MLB_PHASE_SEL				(0x7 << BP_ANADIG_PLL_MLB_PHASE_SEL)
#define BF_ANADIG_PLL_MLB_PHASE_SEL(v)				\
	(((v) << BP_ANADIG_PLL_MLB_PHASE_SEL) & BM_ANADIG_PLL_MLB_PHASE_SEL)
#define BM_ANADIG_PLL_MLB_HOLD_RING_OFF				(1 << 11)

#define BM_ANADIG_PLL_ENET_LOCK					(1 << 31)
#define BM_ANADIG_PLL_ENET_ENABLE_SATA				(1 << 20)
#define BM_ANADIG_PLL_ENET_ENABLE_PCIE				(1 << 19)
#define BM_ANADIG_PLL_ENET_PFD_OFFSET_EN			(1 << 18)
#define BM_ANADIG_PLL_ENET_DITHER_ENABLE			(1 << 17)
#define BM_ANADIG_PLL_ENET_BYPASS				(1 << 16)
#define BP_ANADIG_PLL_ENET_BYPASS_CLK_SRC			14
#define BM_ANADIG_PLL_ENET_BYPASS_CLK_SRC			(0x3 << BP_ANADIG_PLL_ENET_BYPASS_CLK_SRC)
#define BF_ANADIG_PLL_ENET_BYPASS_CLK_SRC(v)				\
	(((v) << BP_ANADIG_PLL_ENET_BYPASS_CLK_SRC) & BM_ANADIG_PLL_ENET_BYPASS_CLK_SRC)
#define BV_ANADIG_PLL_ENET_BYPASS_CLK_SRC__OSC_24M		0x0
#define BV_ANADIG_PLL_ENET_BYPASS_CLK_SRC__ANACLK_1		0x1
#define BV_ANADIG_PLL_ENET_BYPASS_CLK_SRC__ANACLK_2		0x2
#define BV_ANADIG_PLL_ENET_BYPASS_CLK_SRC__XOR			0x3
#define BM_ANADIG_PLL_ENET_ENABLE				(1 << 13)
#define BM_ANADIG_PLL_ENET_POWERDOWN				(1 << 12)
#define BM_ANADIG_PLL_ENET_HOLD_RING_OFF			(1 << 11)
#define BM_ANADIG_PLL_ENET_DOUBLE_CP				(1 << 10)
#define BM_ANADIG_PLL_ENET_HALF_CP				(1 << 9)
#define BM_ANADIG_PLL_ENET_DOUBLE_LF				(1 << 8)
#define BM_ANADIG_PLL_ENET_HALF_LF				(1 << 7)
#define BP_ANADIG_PLL_ENET_DIV_SELECT				0
#define BM_ANADIG_PLL_ENET_DIV_SELECT				(0x3 << BP_ANADIG_PLL_ENET_DIV_SELECT)
#define BF_ANADIG_PLL_ENET_DIV_SELECT(v)				\
	(((v) << BP_ANADIG_PLL_ENET_DIV_SELECT) & BM_ANADIG_PLL_ENET_DIV_SELECT)

#define BM_ANADIG_PFD_480_PFD3_CLKGATE				(1 << 31)
#define BM_ANADIG_PFD_480_PFD3_STABLE				(1 << 30)
#define BP_ANADIG_PFD_480_PFD3_FRAC				24
#define BM_ANADIG_PFD_480_PFD3_FRAC				0x3F000000
#define BF_ANADIG_PFD_480_PFD3_FRAC(v)		\
	(((v) << BP_ANADIG_PFD_480_PFD3_FRAC) & BM_ANADIG_PFD_480_PFD3_FRAC)
#define BM_ANADIG_PFD_480_PFD2_CLKGATE 0x00800000
#define BM_ANADIG_PFD_480_PFD2_STABLE 0x00400000
#define BP_ANADIG_PFD_480_PFD2_FRAC		16
#define BM_ANADIG_PFD_480_PFD2_FRAC 0x003F0000
#define BF_ANADIG_PFD_480_PFD2_FRAC(v)		\
	(((v) << BP_ANADIG_PFD_480_PFD2_FRAC) & BM_ANADIG_PFD_480_PFD2_FRAC)
#define BM_ANADIG_PFD_480_PFD1_CLKGATE		(1 << 15)
#define BM_ANADIG_PFD_480_PFD1_STABLE		(1 << 14)
#define BP_ANADIG_PFD_480_PFD1_FRAC		8
#define BM_ANADIG_PFD_480_PFD1_FRAC 0x00003F00
#define BF_ANADIG_PFD_480_PFD1_FRAC(v)		\
	(((v) << BP_ANADIG_PFD_480_PFD1_FRAC) & BM_ANADIG_PFD_480_PFD1_FRAC)
#define BM_ANADIG_PFD_480_PFD0_CLKGATE			(1 << 7)
#define BM_ANADIG_PFD_480_PFD0_STABLE			(1 << 6)
#define BP_ANADIG_PFD_480_PFD0_FRAC		0
#define BM_ANADIG_PFD_480_PFD0_FRAC 0x0000003F
#define BF_ANADIG_PFD_480_PFD0_FRAC(v)		\
	(((v) << BP_ANADIG_PFD_480_PFD0_FRAC) & BM_ANADIG_PFD_480_PFD0_FRAC)

#define BM_ANADIG_PFD_528_PFD3_CLKGATE		(1 << 31)
#define BM_ANADIG_PFD_528_PFD3_STABLE 0x40000000
#define BP_ANADIG_PFD_528_PFD3_FRAC		24
#define BM_ANADIG_PFD_528_PFD3_FRAC 0x3F000000
#define BF_ANADIG_PFD_528_PFD3_FRAC(v)		\
	(((v) << 24) & BM_ANADIG_PFD_528_PFD3_FRAC)
#define BM_ANADIG_PFD_528_PFD2_CLKGATE 0x00800000
#define BM_ANADIG_PFD_528_PFD2_STABLE 0x00400000
#define BP_ANADIG_PFD_528_PFD2_FRAC		16
#define BM_ANADIG_PFD_528_PFD2_FRAC 0x003F0000
#define BF_ANADIG_PFD_528_PFD2_FRAC(v)		\
	(((v) << 16) & BM_ANADIG_PFD_528_PFD2_FRAC)
#define BM_ANADIG_PFD_528_PFD1_CLKGATE		(1 << 15)
#define BM_ANADIG_PFD_528_PFD1_STABLE		(1 << 14)
#define BP_ANADIG_PFD_528_PFD1_FRAC		8
#define BM_ANADIG_PFD_528_PFD1_FRAC 0x00003F00
#define BF_ANADIG_PFD_528_PFD1_FRAC(v)		\
	(((v) << 8) & BM_ANADIG_PFD_528_PFD1_FRAC)
#define BM_ANADIG_PFD_528_PFD0_CLKGATE			(1 << 7)
#define BM_ANADIG_PFD_528_PFD0_STABLE			(1 << 6)
#define BP_ANADIG_PFD_528_PFD0_FRAC		0
#define BM_ANADIG_PFD_528_PFD0_FRAC 0x0000003F
#define BF_ANADIG_PFD_528_PFD0_FRAC(v)		\
	(((v) << 0) & BM_ANADIG_PFD_528_PFD0_FRAC)

#define BP_ANADIG_ANA_MISC0_CLKGATE_DELAY		26
#define BM_ANADIG_ANA_MISC0_CLKGATE_DELAY		(0x7 << BP_ANADIG_ANA_MISC0_CLKGATE_DELAY)
#define BF_ANADIG_ANA_MISC0_CLKGATE_DELAY(v)			\
	(((v) << BP_ANADIG_ANA_MISC0_CLKGATE_DELAY) & BM_ANADIG_ANA_MISC0_CLKGATE_DELAY)
#define BM_ANADIG_ANA_MISC0_CLKGATE_CTRL		(1 << 25)
#define BP_ANADIG_ANA_MISC0_ANAMUX			21
#define BM_ANADIG_ANA_MISC0_ANAMUX			(0xf << BP_ANADIG_ANA_MISC0_ANAMUX)
#define BF_ANADIG_ANA_MISC0_ANAMUX(v)		\
	(((v) << BP_ANADIG_ANA_MISC0_ANAMUX) & BM_ANADIG_ANA_MISC0_ANAMUX)
#define BM_ANADIG_ANA_MISC0_ANAMUX_EN			(1 << 20)
#define BP_ANADIG_ANA_MISC0_WBCP_VPW_THRESH		18
#define BM_ANADIG_ANA_MISC0_WBCP_VPW_THRESH		(0x3 << BP_ANADIG_ANA_MISC0_WBCP_VPW_THRESH)
#define BF_ANADIG_ANA_MISC0_WBCP_VPW_THRESH(v)		\
	(((v) << BP_ANADIG_ANA_MISC0_WBCP_VPW_THRESH) & BM_ANADIG_ANA_MISC0_WBCP_VPW_THRESH)
#define BM_ANADIG_ANA_MISC0_OSC_XTALOK_EN		(1 << 17)
#define BM_ANADIG_ANA_MISC0_OSC_XTALOK		(1 << 16)
#define BP_ANADIG_ANA_MISC0_OSC_I		14
#define BM_ANADIG_ANA_MISC0_OSC_I 0x0000C000
#define BF_ANADIG_ANA_MISC0_OSC_I(v)		\
	(((v) << BP_ANADIG_ANA_MISC0_OSC_I) & BM_ANADIG_ANA_MISC0_OSC_I)
#define BM_ANADIG_ANA_MISC0_RTC_RINGOSC_EN		(1 << 13)
#define BM_ANADIG_ANA_MISC0_STOP_MODE_CONFIG			(1 << 12)
#define BP_ANADIG_ANA_MISC0_REFTOP_BIAS_TST		8
#define BM_ANADIG_ANA_MISC0_REFTOP_BIAS_TST 0x00000300
#define BF_ANADIG_ANA_MISC0_REFTOP_BIAS_TST(v)		\
	(((v) << BP_ANADIG_ANA_MISC0_REFTOP_BIAS_TST) & BM_ANADIG_ANA_MISC0_REFTOP_BIAS_TST)
#define BM_ANADIG_ANA_MISC0_REFTOP_VBGUP			(1 << 7)
#define BP_ANADIG_ANA_MISC0_REFTOP_VBGADJ		4
#define BM_ANADIG_ANA_MISC0_REFTOP_VBGADJ		(0x7 << BP_ANADIG_ANA_MISC0_REFTOP_VBGADJ)
#define BF_ANADIG_ANA_MISC0_REFTOP_VBGADJ(v)		\
	(((v) << BM_ANADIG_ANA_MISC0_REFTOP_VBGUP) & BM_ANADIG_ANA_MISC0_REFTOP_VBGADJ)
#define BM_ANADIG_ANA_MISC0_REFTOP_SELBIASOFF			(1 << 3)
#define BM_ANADIG_ANA_MISC0_REFTOP_LOWPOWER			(1 << 2)
#define BM_ANADIG_ANA_MISC0_REFTOP_PWDVBGUP			(1 << 1)
#define BM_ANADIG_ANA_MISC0_REFTOP_PWD			(1 << 0)

#define BM_ANADIG_ANA_MISC1_IRQ_DIG_BO		(1 << 31)
#define BM_ANADIG_ANA_MISC1_IRQ_ANA_BO 0x40000000
#define BM_ANADIG_ANA_MISC1_IRQ_TEMPSENSE_BO 0x20000000
#define BM_ANADIG_ANA_MISC1_LVDSCLK2_IBEN		(1 << 13)
#define BM_ANADIG_ANA_MISC1_LVDSCLK1_IBEN			(1 << 12)
#define BM_ANADIG_ANA_MISC1_LVDSCLK2_OBEN			(1 << 11)
#define BM_ANADIG_ANA_MISC1_LVDSCLK1_OBEN			(1 << 10)
#define BP_ANADIG_ANA_MISC1_LVDS2_CLK_SEL		5
#define BM_ANADIG_ANA_MISC1_LVDS2_CLK_SEL 0x000003E0
#define BF_ANADIG_ANA_MISC1_LVDS2_CLK_SEL(v)		\
	(((v) << BP_ANADIG_ANA_MISC1_LVDS2_CLK_SEL) & BM_ANADIG_ANA_MISC1_LVDS2_CLK_SEL)
#define BP_ANADIG_ANA_MISC1_LVDS1_CLK_SEL		0
#define BM_ANADIG_ANA_MISC1_LVDS1_CLK_SEL 0x0000001F
#define BF_ANADIG_ANA_MISC1_LVDS1_CLK_SEL(v)		\
	(((v) << 0) & BM_ANADIG_ANA_MISC1_LVDS1_CLK_SEL)

#define BP_ANADIG_ANA_MISC2_CONTROL3		30
#define BM_ANADIG_ANA_MISC2_CONTROL3 0xC0000000
#define BF_ANADIG_ANA_MISC2_CONTROL3(v) \
	(((v) << BP_ANADIG_ANA_MISC2_CONTROL3) & BM_ANADIG_ANA_MISC2_CONTROL3)
#define BP_ANADIG_ANA_MISC2_REG2_STEP_TIME		28
#define BM_ANADIG_ANA_MISC2_REG2_STEP_TIME 0x30000000
#define BF_ANADIG_ANA_MISC2_REG2_STEP_TIME(v)		\
	(((v) << BP_ANADIG_ANA_MISC2_REG2_STEP_TIME) & BM_ANADIG_ANA_MISC2_REG2_STEP_TIME)
#define BP_ANADIG_ANA_MISC2_REG1_STEP_TIME		26
#define BM_ANADIG_ANA_MISC2_REG1_STEP_TIME 0x0C000000
#define BF_ANADIG_ANA_MISC2_REG1_STEP_TIME(v)		\
	(((v) << BP_ANADIG_ANA_MISC2_REG1_STEP_TIME) & BM_ANADIG_ANA_MISC2_REG1_STEP_TIME)
#define BP_ANADIG_ANA_MISC2_REG0_STEP_TIME		24
#define BM_ANADIG_ANA_MISC2_REG0_STEP_TIME 0x03000000
#define BF_ANADIG_ANA_MISC2_REG0_STEP_TIME(v)		\
	(((v) << BP_ANADIG_ANA_MISC2_REG0_STEP_TIME) & BM_ANADIG_ANA_MISC2_REG0_STEP_TIME)
#define BM_ANADIG_ANA_MISC2_CONTROL2 0x00800000
#define BM_ANADIG_ANA_MISC2_REG2_OK 0x00400000
#define BM_ANADIG_ANA_MISC2_REG2_ENABLE_BO			(1 << 21)
#define BM_ANADIG_ANA_MISC2_REG2_BO_STATUS		(1 << 19)
#define BP_ANADIG_ANA_MISC2_REG2_BO_OFFSET		16
#define BM_ANADIG_ANA_MISC2_REG2_BO_OFFSET 0x00070000
#define BF_ANADIG_ANA_MISC2_REG2_BO_OFFSET(v)		\
	(((v) << BP_ANADIG_ANA_MISC2_REG2_BO_OFFSET) & BM_ANADIG_ANA_MISC2_REG2_BO_OFFSET)
#define BM_ANADIG_ANA_MISC2_CONTROL1		(1 << 15)
#define BM_ANADIG_ANA_MISC2_REG1_OK		(1 << 14)
#define BM_ANADIG_ANA_MISC2_REG1_ENABLE_BO		(1 << 13)
#define BM_ANADIG_ANA_MISC2_REG1_BO_STATUS			(1 << 11)
#define BP_ANADIG_ANA_MISC2_REG1_BO_OFFSET		8
#define BM_ANADIG_ANA_MISC2_REG1_BO_OFFSET 0x00000700
#define BF_ANADIG_ANA_MISC2_REG1_BO_OFFSET(v)		\
	(((v) << BP_ANADIG_ANA_MISC2_REG1_BO_OFFSET) & BM_ANADIG_ANA_MISC2_REG1_BO_OFFSET)
#define BM_ANADIG_ANA_MISC2_CONTROL0			(1 << 7)
#define BM_ANADIG_ANA_MISC2_REG0_OK			(1 << 6)
#define BM_ANADIG_ANA_MISC2_REG0_ENABLE_BO		(1 << 5)
#define BM_ANADIG_ANA_MISC2_REG0_BO_STATUS		(1 << 3)
#define BP_ANADIG_ANA_MISC2_REG0_BO_OFFSET		0
#define BM_ANADIG_ANA_MISC2_REG0_BO_OFFSET		(0x7 << BP_ANADIG_ANA_MISC2_REG0_BO_OFFSET)
#define BF_ANADIG_ANA_MISC2_REG0_BO_OFFSET(v)		\
	(((v) << BP_ANADIG_ANA_MISC2_REG0_BO_OFFSET) & BM_ANADIG_ANA_MISC2_REG0_BO_OFFSET)

#define BP_ANADIG_TEMPSENSE0_ALARM_VALUE	20
#define BM_ANADIG_TEMPSENSE0_ALARM_VALUE	(0xFFF << BP_ANADIG_TEMPSENSE0_ALARM_VALUE)
#define BF_ANADIG_TEMPSENSE0_ALARM_VALUE(v)			\
	(((v) << BP_ANADIG_TEMPSENSE0_ALARM_VALUE) & BM_ANADIG_TEMPSENSE0_ALARM_VALUE)
#define BP_ANADIG_TEMPSENSE0_TEMP_VALUE		8
#define BM_ANADIG_TEMPSENSE0_TEMP_VALUE		(0xFFF << BP_ANADIG_TEMPSENSE0_TEMP_VALUE)
#define BF_ANADIG_TEMPSENSE0_TEMP_VALUE(v)		\
	(((v) << BP_ANADIG_TEMPSENSE0_TEMP_VALUE) & BM_ANADIG_TEMPSENSE0_TEMP_VALUE)
#define BM_ANADIG_TEMPSENSE0_TEST		(1 << 6)
#define BP_ANADIG_TEMPSENSE0_VBGADJ		3
#define BM_ANADIG_TEMPSENSE0_VBGADJ		(0x7 << BP_ANADIG_TEMPSENSE0_VBGADJ)
#define BF_ANADIG_TEMPSENSE0_VBGADJ(v)		\
	(((v) << BP_ANADIG_TEMPSENSE0_VBGADJ) & BM_ANADIG_TEMPSENSE0_VBGADJ)
#define BM_ANADIG_TEMPSENSE0_FINISHED		(1 << 2)
#define BM_ANADIG_TEMPSENSE0_MEASURE_TEMP	(1 << 1)
#define BM_ANADIG_TEMPSENSE0_POWER_DOWN		(1 << 0)

#define BP_ANADIG_TEMPSENSE1_MEASURE_FREQ	0
#define BM_ANADIG_TEMPSENSE1_MEASURE_FREQ	(0xFFFF << BP_ANADIG_TEMPSENSE1_MEASURE_FREQ)
#define BF_ANADIG_TEMPSENSE1_MEASURE_FREQ(v)			\
	(((v) << BP_ANADIG_TEMPSENSE1_MEASURE_FREQ) & BM_ANADIG_TEMPSENSE1_MEASURE_FREQ)

#define PLL2_PFD0_FREQ		352000000
#define PLL2_PFD1_FREQ		594000000
#define PLL2_PFD2_FREQ		400000000
#define PLL2_PFD2_DIV_FREQ	200000000
#define PLL3_PFD0_FREQ		720000000
#define PLL3_PFD1_FREQ		540000000
#define PLL3_PFD2_FREQ		508200000
#define PLL3_PFD3_FREQ		454700000
#define PLL3_80M		80000000
#define PLL3_60M		60000000

#endif /*__ARCH_ARM_MACH_MX6_CCM_REGS_H__ */
